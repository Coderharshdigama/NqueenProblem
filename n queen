#include <iostream>
using namespace std;

bool isSafe(int** board, int row, int col, int n) {
    // check row on left side
    for (int i = 0; i < col; i++)
        if (board[row][i])
            return false;
  
    // check upper diagonal on left side
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j])
            return false;
  
    // check lower diagonal on left side
    for (int i = row, j = col; j >= 0 && i < n; i++, j--)
        if (board[i][j])
            return false;
  
    return true;
}
bool solveNQUtil(int** board, int col, int n) {
    if (col >= n) {
        // found a solution, print board configuration
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++)
                cout << board[i][j] << " ";
            cout << endl;
        }
        cout << endl;
        return false; // continue searching for other solutions
    }
  
    bool found_solution = false;
    for (int i = 0; i < n; i++) {
        if (isSafe(board, i, col, n)) {
            board[i][col] = 1;
            found_solution = solveNQUtil(board, col + 1, n) || found_solution;
            board[i][col] = 0; // backtrack
        }
    }
  
    return found_solution;
}

void solveNQ(int n) {
    int** board = new int*[n];
    for (int i = 0; i < n; i++) {
        board[i] = new int[n];
        for (int j = 0; j < n; j++) {
            board[i][j] = 0;
        }
    }
  
    if (solveNQUtil(board, 0, n) == false) {
        cout << "Solution does not exist";
        return;
    }
  
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++)
            cout << board[i][j] << " ";
        cout << endl;
    }
}

int main() {
    int n;
    cout << "Enter the board size: ";
    cin >> n;
    solveNQ(n);
    return 0;
}
